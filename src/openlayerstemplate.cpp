#include "openlayerstemplate.h"

const char *sections_preamble = 
"\n"
"\n"
"\n"
"\n"
"var map$mapnum;\n"
"\n"
"function makeMap$mapnum() \n"
"{\n"
"	var newlayer;\n"
"\n"
"	var epsg4326proj = new OpenLayers.Projection(\"EPSG:4326\")\n"
"	var map = new OpenLayers.Map('map$mapnum');\n"
"	var layerSwitcher = new OpenLayers.Control.LayerSwitcher();\n"
"	map.addControl(layerSwitcher);\n"
"	var selectControl;\n"
"\n"
"\n"
"	var osm = new OpenLayers.Layer.OSM.MapnikLocalProxy(\"OpenStreetMap\");\n"
"	osm.setIsBaseLayer(true);\n"
"\n"
"    // the SATELLITE layer has all 22 zoom level, so we add it first to\n"
"    // become the internal base layer that determines the zoom levels of the\n"
"    // map.\n"
"    var gsat = new OpenLayers.Layer.Google(\n"
"        \"Google Satellite\",\n"
"        {type: google.maps.MapTypeId.SATELLITE, numZoomLevels: 22, visibility: false,\n"
"		isBaseLayer: true,\n"
"		}\n"
"    );\n"
"	gsat.setIsBaseLayer(true);\n"
"\n"
"    var gphy = new OpenLayers.Layer.Google(\n"
"        \"Google Physical\",\n"
"        {type: google.maps.MapTypeId.TERRAIN, visibility: false,\n"
"		isBaseLayer: true,\n"
"		}\n"
"    );\n"
"	gphy.setIsBaseLayer(true);\n"
"\n"
"    var gmap = new OpenLayers.Layer.Google(\n"
"        \"Google Streets\", // the default\n"
"        {numZoomLevels: 20, visibility: false,\n"
"		isBaseLayer: true,\n"
"		}\n"
"    );\n"
"	gmap.setIsBaseLayer(true);\n"
"\n"
"    var ghyb = new OpenLayers.Layer.Google(\n"
"        \"Google Hybrid\",\n"
"        {type: google.maps.MapTypeId.HYBRID, numZoomLevels: 22, visibility: false,\n"
"		isBaseLayer: true,\n"
"		}\n"
"    );\n"
"	ghyb.setIsBaseLayer(true);\n"
"\n"
"\n"
"    map.addLayers([osm, gsat, gphy, gmap, ghyb]);\n"
"\n"
"    // Google.v3 uses EPSG:900913 as projection, so we have to\n"
"    // transform our coordinates\n"
"    map.setCenter(new OpenLayers.LonLat($lon, $lat).transform(\n"
"					  epsg4326proj,\n"
"					  map.getProjectionObject()\n"
"				  ), $zoom);\n"
"\n"
;

const char *sections_KML = 
"	newlayer = new OpenLayers.Layer.Vector\n"
"	(\"KML\",\n"
"	 {\n"
"		 strategies: [new OpenLayers.Strategy.Fixed()],\n"
"		 protocol: new OpenLayers.Protocol.HTTP\n"
"		 ({\n"
"			  url: \"$kmlurl\",\n"
"			  format: new OpenLayers.Format.KML({\n"
"													extractStyles: true, \n"
"													extractAttributes: true,\n"
"													maxDepth: 2\n"
"												})\n"
"          })\n"
"     });\n"
"	selectControl = new OpenLayers.Control.SelectFeature(\n"
"		newlayer,\n"
"		{onSelect: function (feature) \n"
"		 {\n"
"			 selectedFeature = feature;\n"
"			 popup = new OpenLayers.Popup.FramedCloud(\n"
"				 \"chicken\", \n"
"				 feature.geometry.getBounds().getCenterLonLat(),\n"
"				 new OpenLayers.Size(100,150),\n"
"				 \"<div style='font-size:.8em'><b>Name:</b>\"+feature.attributes.name+\"<br><b>Description:</b>\"+feature.attributes.description+\"</div>\",\n"
"				 null, true,\n"
"				 function () {selectControl.unselect(selectedFeature);}\n"
"				 );\n"
"			 feature.popup = popup;\n"
"			 map.addPopup(popup);\n"
"		 },\n"
"		 onUnselect: function (feature) \n"
"		 {\n"
"			 map.removePopup(feature.popup);\n"
"			 feature.popup.destroy();\n"
"			 feature.popup = null;\n"
"		 },\n"
"		});\n"
"	map.addControl(selectControl);\n"
"	selectControl.activate();\n"
"	map.addLayer(newlayer);\n"
"\n"
;

const char *sections_GeoRSS = 
"	newlayer = new OpenLayers.Layer.GeoRSS( '$georsslayer', '$georssurl');\n"
"	selectControl = new OpenLayers.Control.SelectFeature(\n"
"		newlayer,\n"
"		{onSelect: function (feature) \n"
"		 {\n"
"			 selectedFeature = feature;\n"
"			 popup = new OpenLayers.Popup.FramedCloud(\n"
"				 \"chicken\", \n"
"				 feature.geometry.getBounds().getCenterLonLat(),\n"
"				 new OpenLayers.Size(100,150),\n"
"				 \"<div style='font-size:.8em'><b>Name:</b>\"+feature.attributes.name+\"<br><b>Description:</b>\"+feature.attributes.description+\"</div>\",\n"
"				 null, true,\n"
"				 function () {selectControl.unselect(selectedFeature);}\n"
"			 );\n"
"			 feature.popup = popup;\n"
"			 map.addPopup(popup);\n"
"		 },\n"
"		 onUnselect: function (feature) \n"
"		 {\n"
"			 map.removePopup(feature.popup);\n"
"			 feature.popup.destroy();\n"
"			 feature.popup = null;\n"
"		 },\n"
"		});\n"
"	map.addControl(selectControl);\n"
"	selectControl.activate();\n"
"	map.addLayer(newlayer);\n"
"\n"
;

const char *sections_markerlayerbegin = 
"	var markers = new OpenLayers.Layer.Markers(\"Markers\");\n"
"	map.addLayer(markers);\n"
"	var marker;\n"
"\n"
;

const char *sections_marker = 
"	{\n"
"		var feature = new OpenLayers.Feature(markers, new OpenLayers.LonLat($lon,$lat).transform(\n"
"												 epsg4326proj,\n"
"												 map.getProjectionObject()));\n"
"		feature.closeBox = true;\n"
"		feature.popupClass =  OpenLayers.Class(OpenLayers.Popup.FramedCloud, {\n"
"												   'autoSize': true,\n"
"												   'maxSize': new OpenLayers.Size(300,200)\n"
"											   });\n"
"		feature.data.popupContentHTML = \"$caption\";\n"
"        feature.data.overflow = \"auto\";\n"
"        \n"
"		marker = feature.createMarker();\n"
"		\n"
"		var markerClick = function (evt) {\n"
"			if (this.popup == null) {\n"
"				this.popup = this.createPopup(this.closeBox);\n"
"				map.addPopup(this.popup);\n"
"				this.popup.show();\n"
"			} else {\n"
"				this.popup.toggle();\n"
"			}\n"
"			currentPopup = this.popup;\n"
"			OpenLayers.Event.stop(evt);\n"
"        };\n"
"		marker.events.register(\"mousedown\", feature, markerClick);\n"
"		markers.addMarker(marker);\n"
"	} \n"
"\n"
"\n"
;

const char *sections_vectorlayerpreamble = 
"	{\n"
"		var layerGeometry = new OpenLayers.Layer.Vector(\"Lines\",{projection: map.getProjectionObject()});\n"
"		map.addLayer(layerGeometry);\n"
"		var points = [];\n"
"\n"
;

const char *sections_vectorlayerpoint = 
"		{\n"
"			var point = new OpenLayers.Geometry.Point($lon,$lat);\n"
"			points.push(point.transform(epsg4326proj, map.getProjectionObject()));\n"
"		}\n"
;

const char *sections_vectorlayerpost = 
"		var geometry = new OpenLayers.Geometry.LineString(points);\n"
"		var feature = new OpenLayers.Feature.Vector(geometry, null, {\n"
"														strokeColor: \"#$color\",\n"
"														strokeOpacity: 0.7,\n"
"														strokeWidth: 5\n"
"													});\n"
"		layerGeometry.addFeatures(feature);\n"
"	}\n"
"\n"
;

const char *sections_gpstracklayer = 
"    {\n"
"        var urlbase = '/cgi-bin/mapserver.pl?type=';\n"
"        var url = '';\n"
"        var fromdate = '$fromdate';\n"
"        var todate = '$todate';\n"
"        var imgoffset = '$imgoffset';\n"
"\n"
"        if (fromdate != \"\")\n"
"        {\n"
"            url = url + \"&from=\" + fromdate;\n"
"        }\n"
"\n"
"        if (todate != \"\")\n"
"        {\n"
"            url = url + \"&to=\" + todate;\n"
"        }\n"
"\n"
"        if (imgoffset != \"\")\n"
"        {\n"
"            url = url + \"&imgoffset=\" + imgoffset;\n"
"        }\n"
"        var linelayername = \"Line Layer - $fromdate - $todate\";\n"
"        var markerlayername = \"Marker Layer - $fromdate - $todate\"\n"
"        var imagelayername = \"Image Layer - $fromdate - $todate\"\n"
"        loadLineLayerIntoMap(map, linelayername, new Array());\n"
"        loadMarkersIntoMap(map, markerlayername, \"blue\", new Array());\n"
"        loadMarkersIntoMap(map, imagelayername, \"camera\", new Array());\n"
"        $.ajax({\n"
"            url: urlbase+'line'+url,\n"
"            dataType: 'json',\n"
"            success: function (data)\n"
"            {\n"
"                var pll = loadLineLayerIntoMap(map, linelayername, data);\n"
"                map.setCenter(pll, $zoomlevel);\n"
"            }\n"
"        });\n"
"\n"
"        $.ajax({\n"
"            url: urlbase+'marks'+url,\n"
"            dataType: 'json',\n"
"            success: function (data)\n"
"            {\n"
"                var pll = loadMarkersIntoMap(map, markerlayername, \"blue\", data);\n"
"                map.setCenter(pll, $zoomlevel);\n"
"            }\n"
"        });\n"
"\n"
"        $.ajax({\n"
"            url: urlbase+'image'+url,\n"
"            dataType: 'json',\n"
"            success: function (data)\n"
"            {\n"
"                var pll = loadMarkersIntoMap(map, imagelayername, \"camera\", data);\n"
"                map.setCenter(pll, $zoomlevel);\n"
"            }\n"
"        });\n"
"    }\n"
"\n"
;

const char *sections_post = 
"	map$mapnum = map;\n"
"}\n"
"addLoadEvent(makeMap$mapnum);\n"
"\n"
;
